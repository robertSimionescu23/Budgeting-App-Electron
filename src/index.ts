import { app, BrowserWindow, ipcMain } from 'electron';
import fs from 'fs';
import path from 'path';
import type { BudgetEntry } from './InterfaceBudgetEntry';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    titleBarStyle: 'hidden',
    titleBarOverlay:{
        color: "#e5e7eb",
    },
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

const basePath = app.getPath('userData');
const folderPath = path.join(basePath, 'Json Data');

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', () => {

    if (!fs.existsSync(folderPath)) {
        fs.mkdirSync(folderPath);
    }

    createWindow();
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

ipcMain.handle('save-json', async (event, year: number, data: BudgetEntry[]) => {

    const filePath = path.join(folderPath, `year_${year}.json`);

    if(fs.existsSync(filePath)) {
        const existingData = JSON.parse(fs.readFileSync(filePath, 'utf-8'));

        if(Array.isArray(existingData)) existingData.push(...data);
        else alert("Error: The existing JSON file is not an array. Cannot append new data.");

        fs.writeFileSync(filePath, JSON.stringify(existingData, null, 2), 'utf-8');
        return filePath;
    }
    else fs.writeFileSync(filePath, JSON.stringify(data, null, 2), 'utf-8');
    return filePath;
});

ipcMain.handle('get-submitted-years', () => {
    if (!fs.existsSync(folderPath)) return [];
    const files = fs.readdirSync(folderPath);
    // Extract years from filenames like "year_2024.json"
    return files
        .map(f => {
            const match = f.match(/^year_(\d{4})\.json$/);
            return match ? Number(match[1]) : null;
        })
        .filter((year): year is number => year !== null);
});

ipcMain.handle('get-year-report', async (event, year: number) => {
    let data: object | string = "[]";
    const filePath = path.join(folderPath, `year_${year}.json`);
    if(fs.existsSync(filePath)) {
        data = JSON.parse(fs.readFileSync(filePath, 'utf-8'));
    }
    else data = null;
    return data;
});


declare global {
    interface Window {
        electronAPI: {
            saveJson: (year: number, data: BudgetEntry[]) => Promise<string>;
            getSubmittedYears: () => Promise<number[]>;
            getYearReport: (year: number) => Promise<object>;
        };
    }
}
